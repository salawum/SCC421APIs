# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CharacterListInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, height: int=None, mass: float=None, hair_color: str=None, skin_color: str=None, eye_color: str=None, birth_year: str=None, gender: str=None, homeworld: str=None, species: str=None):  # noqa: E501
        """CharacterListInner - a model defined in Swagger

        :param name: The name of this CharacterListInner.  # noqa: E501
        :type name: str
        :param height: The height of this CharacterListInner.  # noqa: E501
        :type height: int
        :param mass: The mass of this CharacterListInner.  # noqa: E501
        :type mass: float
        :param hair_color: The hair_color of this CharacterListInner.  # noqa: E501
        :type hair_color: str
        :param skin_color: The skin_color of this CharacterListInner.  # noqa: E501
        :type skin_color: str
        :param eye_color: The eye_color of this CharacterListInner.  # noqa: E501
        :type eye_color: str
        :param birth_year: The birth_year of this CharacterListInner.  # noqa: E501
        :type birth_year: str
        :param gender: The gender of this CharacterListInner.  # noqa: E501
        :type gender: str
        :param homeworld: The homeworld of this CharacterListInner.  # noqa: E501
        :type homeworld: str
        :param species: The species of this CharacterListInner.  # noqa: E501
        :type species: str
        """
        self.swagger_types = {
            'name': str,
            'height': int,
            'mass': float,
            'hair_color': str,
            'skin_color': str,
            'eye_color': str,
            'birth_year': str,
            'gender': str,
            'homeworld': str,
            'species': str
        }

        self.attribute_map = {
            'name': 'name',
            'height': 'height',
            'mass': 'mass',
            'hair_color': 'hair_color',
            'skin_color': 'skin_color',
            'eye_color': 'eye_color',
            'birth_year': 'birth_year',
            'gender': 'gender',
            'homeworld': 'homeworld',
            'species': 'species'
        }
        self._name = name
        self._height = height
        self._mass = mass
        self._hair_color = hair_color
        self._skin_color = skin_color
        self._eye_color = eye_color
        self._birth_year = birth_year
        self._gender = gender
        self._homeworld = homeworld
        self._species = species

    @classmethod
    def from_dict(cls, dikt) -> 'CharacterListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CharacterList_inner of this CharacterListInner.  # noqa: E501
        :rtype: CharacterListInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CharacterListInner.


        :return: The name of this CharacterListInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CharacterListInner.


        :param name: The name of this CharacterListInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def height(self) -> int:
        """Gets the height of this CharacterListInner.


        :return: The height of this CharacterListInner.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this CharacterListInner.


        :param height: The height of this CharacterListInner.
        :type height: int
        """

        self._height = height

    @property
    def mass(self) -> float:
        """Gets the mass of this CharacterListInner.


        :return: The mass of this CharacterListInner.
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass: float):
        """Sets the mass of this CharacterListInner.


        :param mass: The mass of this CharacterListInner.
        :type mass: float
        """

        self._mass = mass

    @property
    def hair_color(self) -> str:
        """Gets the hair_color of this CharacterListInner.


        :return: The hair_color of this CharacterListInner.
        :rtype: str
        """
        return self._hair_color

    @hair_color.setter
    def hair_color(self, hair_color: str):
        """Sets the hair_color of this CharacterListInner.


        :param hair_color: The hair_color of this CharacterListInner.
        :type hair_color: str
        """

        self._hair_color = hair_color

    @property
    def skin_color(self) -> str:
        """Gets the skin_color of this CharacterListInner.


        :return: The skin_color of this CharacterListInner.
        :rtype: str
        """
        return self._skin_color

    @skin_color.setter
    def skin_color(self, skin_color: str):
        """Sets the skin_color of this CharacterListInner.


        :param skin_color: The skin_color of this CharacterListInner.
        :type skin_color: str
        """

        self._skin_color = skin_color

    @property
    def eye_color(self) -> str:
        """Gets the eye_color of this CharacterListInner.


        :return: The eye_color of this CharacterListInner.
        :rtype: str
        """
        return self._eye_color

    @eye_color.setter
    def eye_color(self, eye_color: str):
        """Sets the eye_color of this CharacterListInner.


        :param eye_color: The eye_color of this CharacterListInner.
        :type eye_color: str
        """

        self._eye_color = eye_color

    @property
    def birth_year(self) -> str:
        """Gets the birth_year of this CharacterListInner.


        :return: The birth_year of this CharacterListInner.
        :rtype: str
        """
        return self._birth_year

    @birth_year.setter
    def birth_year(self, birth_year: str):
        """Sets the birth_year of this CharacterListInner.


        :param birth_year: The birth_year of this CharacterListInner.
        :type birth_year: str
        """

        self._birth_year = birth_year

    @property
    def gender(self) -> str:
        """Gets the gender of this CharacterListInner.


        :return: The gender of this CharacterListInner.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this CharacterListInner.


        :param gender: The gender of this CharacterListInner.
        :type gender: str
        """

        self._gender = gender

    @property
    def homeworld(self) -> str:
        """Gets the homeworld of this CharacterListInner.


        :return: The homeworld of this CharacterListInner.
        :rtype: str
        """
        return self._homeworld

    @homeworld.setter
    def homeworld(self, homeworld: str):
        """Sets the homeworld of this CharacterListInner.


        :param homeworld: The homeworld of this CharacterListInner.
        :type homeworld: str
        """

        self._homeworld = homeworld

    @property
    def species(self) -> str:
        """Gets the species of this CharacterListInner.


        :return: The species of this CharacterListInner.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species: str):
        """Sets the species of this CharacterListInner.


        :param species: The species of this CharacterListInner.
        :type species: str
        """

        self._species = species
