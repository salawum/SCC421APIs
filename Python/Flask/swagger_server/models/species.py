# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Species(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, classification: str=None, designation: str=None, average_height: int=None, skin_colors: str=None, hair_colours: str=None, eye_colors: str=None, average_lifespan: int=None, language: str=None, homeworld: str=None):  # noqa: E501
        """Species - a model defined in Swagger

        :param name: The name of this Species.  # noqa: E501
        :type name: str
        :param classification: The classification of this Species.  # noqa: E501
        :type classification: str
        :param designation: The designation of this Species.  # noqa: E501
        :type designation: str
        :param average_height: The average_height of this Species.  # noqa: E501
        :type average_height: int
        :param skin_colors: The skin_colors of this Species.  # noqa: E501
        :type skin_colors: str
        :param hair_colours: The hair_colours of this Species.  # noqa: E501
        :type hair_colours: str
        :param eye_colors: The eye_colors of this Species.  # noqa: E501
        :type eye_colors: str
        :param average_lifespan: The average_lifespan of this Species.  # noqa: E501
        :type average_lifespan: int
        :param language: The language of this Species.  # noqa: E501
        :type language: str
        :param homeworld: The homeworld of this Species.  # noqa: E501
        :type homeworld: str
        """
        self.swagger_types = {
            'name': str,
            'classification': str,
            'designation': str,
            'average_height': int,
            'skin_colors': str,
            'hair_colours': str,
            'eye_colors': str,
            'average_lifespan': int,
            'language': str,
            'homeworld': str
        }

        self.attribute_map = {
            'name': 'name',
            'classification': 'classification',
            'designation': 'designation',
            'average_height': 'average_height',
            'skin_colors': 'skin_colors',
            'hair_colours': 'hair_colours',
            'eye_colors': 'eye_colors',
            'average_lifespan': 'average_lifespan',
            'language': 'language',
            'homeworld': 'homeworld'
        }
        self._name = name
        self._classification = classification
        self._designation = designation
        self._average_height = average_height
        self._skin_colors = skin_colors
        self._hair_colours = hair_colours
        self._eye_colors = eye_colors
        self._average_lifespan = average_lifespan
        self._language = language
        self._homeworld = homeworld

    @classmethod
    def from_dict(cls, dikt) -> 'Species':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Species of this Species.  # noqa: E501
        :rtype: Species
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Species.


        :return: The name of this Species.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Species.


        :param name: The name of this Species.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def classification(self) -> str:
        """Gets the classification of this Species.


        :return: The classification of this Species.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification: str):
        """Sets the classification of this Species.


        :param classification: The classification of this Species.
        :type classification: str
        """

        self._classification = classification

    @property
    def designation(self) -> str:
        """Gets the designation of this Species.


        :return: The designation of this Species.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation: str):
        """Sets the designation of this Species.


        :param designation: The designation of this Species.
        :type designation: str
        """

        self._designation = designation

    @property
    def average_height(self) -> int:
        """Gets the average_height of this Species.


        :return: The average_height of this Species.
        :rtype: int
        """
        return self._average_height

    @average_height.setter
    def average_height(self, average_height: int):
        """Sets the average_height of this Species.


        :param average_height: The average_height of this Species.
        :type average_height: int
        """

        self._average_height = average_height

    @property
    def skin_colors(self) -> str:
        """Gets the skin_colors of this Species.


        :return: The skin_colors of this Species.
        :rtype: str
        """
        return self._skin_colors

    @skin_colors.setter
    def skin_colors(self, skin_colors: str):
        """Sets the skin_colors of this Species.


        :param skin_colors: The skin_colors of this Species.
        :type skin_colors: str
        """

        self._skin_colors = skin_colors

    @property
    def hair_colours(self) -> str:
        """Gets the hair_colours of this Species.


        :return: The hair_colours of this Species.
        :rtype: str
        """
        return self._hair_colours

    @hair_colours.setter
    def hair_colours(self, hair_colours: str):
        """Sets the hair_colours of this Species.


        :param hair_colours: The hair_colours of this Species.
        :type hair_colours: str
        """

        self._hair_colours = hair_colours

    @property
    def eye_colors(self) -> str:
        """Gets the eye_colors of this Species.


        :return: The eye_colors of this Species.
        :rtype: str
        """
        return self._eye_colors

    @eye_colors.setter
    def eye_colors(self, eye_colors: str):
        """Sets the eye_colors of this Species.


        :param eye_colors: The eye_colors of this Species.
        :type eye_colors: str
        """

        self._eye_colors = eye_colors

    @property
    def average_lifespan(self) -> int:
        """Gets the average_lifespan of this Species.


        :return: The average_lifespan of this Species.
        :rtype: int
        """
        return self._average_lifespan

    @average_lifespan.setter
    def average_lifespan(self, average_lifespan: int):
        """Sets the average_lifespan of this Species.


        :param average_lifespan: The average_lifespan of this Species.
        :type average_lifespan: int
        """

        self._average_lifespan = average_lifespan

    @property
    def language(self) -> str:
        """Gets the language of this Species.


        :return: The language of this Species.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Species.


        :param language: The language of this Species.
        :type language: str
        """

        self._language = language

    @property
    def homeworld(self) -> str:
        """Gets the homeworld of this Species.


        :return: The homeworld of this Species.
        :rtype: str
        """
        return self._homeworld

    @homeworld.setter
    def homeworld(self, homeworld: str):
        """Sets the homeworld of this Species.


        :param homeworld: The homeworld of this Species.
        :type homeworld: str
        """

        self._homeworld = homeworld
