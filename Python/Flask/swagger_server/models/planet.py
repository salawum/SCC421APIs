# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Planet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, rotation_period: float=None, orbital_period: float=None, diameter: int=None, climate: str=None, gravity: str=None, terrain: str=None, surface_water: float=None, population: int=None):  # noqa: E501
        """Planet - a model defined in Swagger

        :param name: The name of this Planet.  # noqa: E501
        :type name: str
        :param rotation_period: The rotation_period of this Planet.  # noqa: E501
        :type rotation_period: float
        :param orbital_period: The orbital_period of this Planet.  # noqa: E501
        :type orbital_period: float
        :param diameter: The diameter of this Planet.  # noqa: E501
        :type diameter: int
        :param climate: The climate of this Planet.  # noqa: E501
        :type climate: str
        :param gravity: The gravity of this Planet.  # noqa: E501
        :type gravity: str
        :param terrain: The terrain of this Planet.  # noqa: E501
        :type terrain: str
        :param surface_water: The surface_water of this Planet.  # noqa: E501
        :type surface_water: float
        :param population: The population of this Planet.  # noqa: E501
        :type population: int
        """
        self.swagger_types = {
            'name': str,
            'rotation_period': float,
            'orbital_period': float,
            'diameter': int,
            'climate': str,
            'gravity': str,
            'terrain': str,
            'surface_water': float,
            'population': int
        }

        self.attribute_map = {
            'name': 'name',
            'rotation_period': 'rotation_period',
            'orbital_period': 'orbital_period',
            'diameter': 'diameter',
            'climate': 'climate',
            'gravity': 'gravity',
            'terrain': 'terrain',
            'surface_water': 'surface_water',
            'population': 'population'
        }
        self._name = name
        self._rotation_period = rotation_period
        self._orbital_period = orbital_period
        self._diameter = diameter
        self._climate = climate
        self._gravity = gravity
        self._terrain = terrain
        self._surface_water = surface_water
        self._population = population

    @classmethod
    def from_dict(cls, dikt) -> 'Planet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Planet of this Planet.  # noqa: E501
        :rtype: Planet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Planet.


        :return: The name of this Planet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Planet.


        :param name: The name of this Planet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rotation_period(self) -> float:
        """Gets the rotation_period of this Planet.


        :return: The rotation_period of this Planet.
        :rtype: float
        """
        return self._rotation_period

    @rotation_period.setter
    def rotation_period(self, rotation_period: float):
        """Sets the rotation_period of this Planet.


        :param rotation_period: The rotation_period of this Planet.
        :type rotation_period: float
        """

        self._rotation_period = rotation_period

    @property
    def orbital_period(self) -> float:
        """Gets the orbital_period of this Planet.


        :return: The orbital_period of this Planet.
        :rtype: float
        """
        return self._orbital_period

    @orbital_period.setter
    def orbital_period(self, orbital_period: float):
        """Sets the orbital_period of this Planet.


        :param orbital_period: The orbital_period of this Planet.
        :type orbital_period: float
        """

        self._orbital_period = orbital_period

    @property
    def diameter(self) -> int:
        """Gets the diameter of this Planet.


        :return: The diameter of this Planet.
        :rtype: int
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter: int):
        """Sets the diameter of this Planet.


        :param diameter: The diameter of this Planet.
        :type diameter: int
        """

        self._diameter = diameter

    @property
    def climate(self) -> str:
        """Gets the climate of this Planet.


        :return: The climate of this Planet.
        :rtype: str
        """
        return self._climate

    @climate.setter
    def climate(self, climate: str):
        """Sets the climate of this Planet.


        :param climate: The climate of this Planet.
        :type climate: str
        """

        self._climate = climate

    @property
    def gravity(self) -> str:
        """Gets the gravity of this Planet.


        :return: The gravity of this Planet.
        :rtype: str
        """
        return self._gravity

    @gravity.setter
    def gravity(self, gravity: str):
        """Sets the gravity of this Planet.


        :param gravity: The gravity of this Planet.
        :type gravity: str
        """

        self._gravity = gravity

    @property
    def terrain(self) -> str:
        """Gets the terrain of this Planet.


        :return: The terrain of this Planet.
        :rtype: str
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain: str):
        """Sets the terrain of this Planet.


        :param terrain: The terrain of this Planet.
        :type terrain: str
        """

        self._terrain = terrain

    @property
    def surface_water(self) -> float:
        """Gets the surface_water of this Planet.


        :return: The surface_water of this Planet.
        :rtype: float
        """
        return self._surface_water

    @surface_water.setter
    def surface_water(self, surface_water: float):
        """Sets the surface_water of this Planet.


        :param surface_water: The surface_water of this Planet.
        :type surface_water: float
        """

        self._surface_water = surface_water

    @property
    def population(self) -> int:
        """Gets the population of this Planet.


        :return: The population of this Planet.
        :rtype: int
        """
        return self._population

    @population.setter
    def population(self, population: int):
        """Sets the population of this Planet.


        :param population: The population of this Planet.
        :type population: int
        """

        self._population = population
