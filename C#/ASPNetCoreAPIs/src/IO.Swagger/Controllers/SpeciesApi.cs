/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SpeciesApiController : ControllerBase
    { 
        /// <summary>
        /// Add a species to the database
        /// </summary>
        /// <param name="body">Species object to be added to the database</param>
        /// <response code="200">Successfully added Species to database</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Species not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPost]
        [Route("/species")]
        [ValidateModelState]
        [SwaggerOperation("AddSpecies")]
        public virtual IActionResult AddSpecies([FromBody]Species body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete a species from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully deleted Species object from the database</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Species not found</response>
        [HttpDelete]
        [Route("/species/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSpecies")]
        public virtual IActionResult DeleteSpecies([FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a list of species with the specified eye color
        /// </summary>
        /// <param name="eyeColor"></param>
        /// <response code="200">Successfully found species(s)</response>
        /// <response code="400">Invalid eye color supplied</response>
        /// <response code="404">Species(s) not found</response>
        [HttpGet]
        [Route("/species/eye/{eye_color}")]
        [ValidateModelState]
        [SwaggerOperation("GetEyeColor")]
        [SwaggerResponse(statusCode: 200, type: typeof(SpeciesList), description: "Successfully found species(s)")]
        public virtual IActionResult GetEyeColor([FromRoute][Required]string eyeColor)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SpeciesList));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"average_height\" : 180,\n  \"skin_colors\" : \"caucasian, black, asian, hispanic\",\n  \"homeworld\" : \"Coruscant\",\n  \"name\" : \"Human\",\n  \"eye_colors\" : \"brown, blue, green, hazel, grey, amber\",\n  \"language\" : \"Galactic Basic\",\n  \"designation\" : \"sentient\",\n  \"classification\" : \"mammal\",\n  \"average_lifespan\" : 120,\n  \"hair_colours\" : \"blonde, brown, black, red\"\n}, {\n  \"average_height\" : 180,\n  \"skin_colors\" : \"caucasian, black, asian, hispanic\",\n  \"homeworld\" : \"Coruscant\",\n  \"name\" : \"Human\",\n  \"eye_colors\" : \"brown, blue, green, hazel, grey, amber\",\n  \"language\" : \"Galactic Basic\",\n  \"designation\" : \"sentient\",\n  \"classification\" : \"mammal\",\n  \"average_lifespan\" : 120,\n  \"hair_colours\" : \"blonde, brown, black, red\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SpeciesList>(exampleJson)
                        : default(SpeciesList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a species from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully found Species object</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Species not found</response>
        [HttpGet]
        [Route("/species/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetSpecies")]
        [SwaggerResponse(statusCode: 200, type: typeof(Species), description: "Successfully found Species object")]
        public virtual IActionResult GetSpecies([FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Species));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"average_height\" : 180,\n  \"skin_colors\" : \"caucasian, black, asian, hispanic\",\n  \"homeworld\" : \"Coruscant\",\n  \"name\" : \"Human\",\n  \"eye_colors\" : \"brown, blue, green, hazel, grey, amber\",\n  \"language\" : \"Galactic Basic\",\n  \"designation\" : \"sentient\",\n  \"classification\" : \"mammal\",\n  \"average_lifespan\" : 120,\n  \"hair_colours\" : \"blonde, brown, black, red\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Species>(exampleJson)
                        : default(Species);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing species
        /// </summary>
        /// <param name="body">Species object to be updated</param>
        /// <response code="200">Successfully updated Species object</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Species not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPut]
        [Route("/species")]
        [ValidateModelState]
        [SwaggerOperation("UpdateSpecies")]
        public virtual IActionResult UpdateSpecies([FromBody]Species body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }
    }
}
