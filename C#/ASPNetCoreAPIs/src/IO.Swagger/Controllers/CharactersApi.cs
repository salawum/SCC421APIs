/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CharactersApiController : ControllerBase
    { 
        /// <summary>
        /// Add a character to the database
        /// </summary>
        /// <param name="body">Character object to be added to the database</param>
        /// <response code="200">Successfully added character</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Character not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPost]
        [Route("/character")]
        [ValidateModelState]
        [SwaggerOperation("AddCharacter")]
        public virtual IActionResult AddCharacter([FromBody]Character body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete a character from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully deleted Character object from the database</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Character not found</response>
        [HttpDelete]
        [Route("/character/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCharacter")]
        public virtual IActionResult DeleteCharacter([FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a character from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully found Character object</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Character not found</response>
        [HttpGet]
        [Route("/character/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetCharacter")]
        [SwaggerResponse(statusCode: 200, type: typeof(Character), description: "Successfully found Character object")]
        public virtual IActionResult GetCharacter([FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Character));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"homeworld\" : \"Tatooine\",\n  \"eye_color\" : \"blue\",\n  \"gender\" : \"male\",\n  \"skin_color\" : \"fair\",\n  \"species\" : \"Human\",\n  \"mass\" : 77,\n  \"name\" : \"Luke Skywalker\",\n  \"height\" : 172,\n  \"hair_color\" : \"blonde\",\n  \"birth_year\" : \"19BBY\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Character>(exampleJson)
                        : default(Character);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of all charcaters with mass greater than or equal to the specified mass value
        /// </summary>
        /// <param name="mass"></param>
        /// <response code="200">Successfully found character(s) with suitable mass</response>
        /// <response code="400">Invalid mass supplied</response>
        /// <response code="404">Character(s) not found</response>
        [HttpGet]
        [Route("/character/mass/{mass}")]
        [ValidateModelState]
        [SwaggerOperation("GetMass")]
        [SwaggerResponse(statusCode: 200, type: typeof(CharacterList), description: "Successfully found character(s) with suitable mass")]
        public virtual IActionResult GetMass([FromRoute][Required]int? mass)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CharacterList));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"homeworld\" : \"Tatooine\",\n  \"eye_color\" : \"blue\",\n  \"gender\" : \"male\",\n  \"skin_color\" : \"fair\",\n  \"species\" : \"Human\",\n  \"mass\" : 77,\n  \"name\" : \"Luke Skywalker\",\n  \"height\" : 172,\n  \"hair_color\" : \"blonde\",\n  \"birth_year\" : \"19BBY\"\n}, {\n  \"homeworld\" : \"Tatooine\",\n  \"eye_color\" : \"blue\",\n  \"gender\" : \"male\",\n  \"skin_color\" : \"fair\",\n  \"species\" : \"Human\",\n  \"mass\" : 77,\n  \"name\" : \"Luke Skywalker\",\n  \"height\" : 172,\n  \"hair_color\" : \"blonde\",\n  \"birth_year\" : \"19BBY\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<CharacterList>(exampleJson)
                        : default(CharacterList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing Character object
        /// </summary>
        /// <param name="body">Character object to be updated</param>
        /// <response code="200">Successfully updated character</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Character not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPut]
        [Route("/character")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCharacter")]
        public virtual IActionResult UpdateCharacter([FromBody]Character body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }
    }
}
