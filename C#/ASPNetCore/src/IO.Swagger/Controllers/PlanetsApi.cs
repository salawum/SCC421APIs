/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

using MySqlConnector;
using System.Data;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlanetsApiController : ControllerBase
    { 
        /// <summary>
        /// Add a planet to the database
        /// </summary>
        /// <param name="body">Planet object to be added to the database</param>
        /// <response code="200">Successfully added Planet object to the database</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Planet not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPost]
        [Route("/planet")]
        [ValidateModelState]
        [SwaggerOperation("AddPlanet")]
        public async virtual Task<IActionResult> AddPlanet([FromBody]Planet body)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("addPlanet", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@p_name", body.Name);
                cmd.Parameters.AddWithValue("@p_rotation_period", body.RotationPeriod);
                cmd.Parameters.AddWithValue("@p_orbital_period", body.OrbitalPeriod);
                cmd.Parameters.AddWithValue("@p_diameter", body.Diameter);
                cmd.Parameters.AddWithValue("@p_climate", body.Climate);
                cmd.Parameters.AddWithValue("@p_gravity", body.Gravity);
                cmd.Parameters.AddWithValue("@p_terrain", body.Terrain);
                cmd.Parameters.AddWithValue("@p_surface_water", body.SurfaceWater);
                cmd.Parameters.AddWithValue("@p_population", body.Population);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                return StatusCode(200, body);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Delete a planet from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully deleted Planet object from the database</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Planet not found</response>
        [HttpDelete]
        [Route("/planet/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePlanet")]
        public async virtual Task<IActionResult> DeletePlanet([FromRoute][Required]string name)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("deletePlanet", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@p_name", name);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                if(rdr.RecordsAffected >= 1) {
                    return StatusCode(200);
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Get a planet from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully found Planet object</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Planet not found</response>
        [HttpGet]
        [Route("/planet/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetPlanet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Planet), description: "Successfully found Planet object")]
        public async virtual Task<IActionResult> GetPlanet([FromRoute][Required]string name)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("getPlanet", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@p_name", name);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                while(await rdr.ReadAsync()) {
                    object[] res = new object[rdr.FieldCount];
                    rdr.GetValues(res);
                    string body =
                        "{name: " + res[1] + ", " +
                        "rotation_period: " + res[2] + ", " +
                        "orbital_period: " + res[3] + ", " +
                        "diameter: " + res[4] + ", " +
                        "climate: " + res[5] + ", " +
                        "gravity: " + res[6] + ", " +
                        "terrain: " + res[7] + ", " +
                        "surface_water: " + res[8] + ", " +
                        "population: " + res[9] + "}";
                    Console.WriteLine(body);
                    if(rdr.GetValues(res) > 0) {
                        return StatusCode(200, JsonConvert.SerializeObject(body));
                    }
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Get a list of planets with the specified terrain type
        /// </summary>
        /// <param name="terrain"></param>
        /// <response code="200">Successfully found planet(s)</response>
        /// <response code="400">Invalid terrain supplied</response>
        /// <response code="404">Planet(s) not found</response>
        [HttpGet]
        [Route("/planet/terrain/{terrain}")]
        [ValidateModelState]
        [SwaggerOperation("GetTerrain")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlanetList), description: "Successfully found planet(s)")]
        public async virtual Task<IActionResult> GetTerrain([FromRoute][Required]string terrain)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("getTerrain", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@p_terrain", terrain);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                string body = String.Empty;
                while(await rdr.ReadAsync()) {
                    object[] res = new object[rdr.FieldCount];
                    rdr.GetValues(res);
                    string name = "{name: " + res[0] + "},";
                    Console.WriteLine(name);
                    body += " " + name;
                }
                if(body.Length > 0) {
                    return StatusCode(200, JsonConvert.SerializeObject("[" + body.Substring(0, body.Length - 1) + " ]"));
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Get a list of planets that are uninhabited
        /// </summary>
        /// <response code="200">Successfully found planet(s)</response>
        /// <response code="404">Planet(s) not found</response>
        [HttpGet]
        [Route("/planet/uninhabited")]
        [ValidateModelState]
        [SwaggerOperation("GetUninhabited")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlanetList), description: "Successfully found planet(s)")]
        public async virtual Task<IActionResult> GetUninhabited()
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("getUninhabited", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                string body = String.Empty;
                while(await rdr.ReadAsync()) {
                    object[] res = new object[rdr.FieldCount];
                    rdr.GetValues(res);
                    string name = "{name: " + res[0] + "},";
                    Console.WriteLine(name);
                    body += " " + name;
                }
                if(body.Length > 0) {
                    return StatusCode(200, JsonConvert.SerializeObject("[" + body.Substring(0, body.Length - 1) + " ]"));
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Update an existing planet
        /// </summary>
        /// <param name="body">Planet object to be updated</param>
        /// <response code="200">Successfully updated Planet object</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Planet not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPut]
        [Route("/planet")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePlanet")]
        public async virtual Task<IActionResult> UpdatePlanet([FromBody]Planet body)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("updatePlanet", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@p_name", body.Name);
                cmd.Parameters.AddWithValue("@p_rotation_period", body.RotationPeriod);
                cmd.Parameters.AddWithValue("@p_orbital_period", body.OrbitalPeriod);
                cmd.Parameters.AddWithValue("@p_diameter", body.Diameter);
                cmd.Parameters.AddWithValue("@p_climate", body.Climate);
                cmd.Parameters.AddWithValue("@p_gravity", body.Gravity);
                cmd.Parameters.AddWithValue("@p_terrain", body.Terrain);
                cmd.Parameters.AddWithValue("@p_surface_water", body.SurfaceWater);
                cmd.Parameters.AddWithValue("@p_population", body.Population);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                if(rdr.RecordsAffected >= 1) {
                    return StatusCode(200, body);
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }
    }
}
