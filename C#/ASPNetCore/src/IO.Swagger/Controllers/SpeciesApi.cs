/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

using MySqlConnector;
using System.Data;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SpeciesApiController : ControllerBase
    { 
        /// <summary>
        /// Add a species to the database
        /// </summary>
        /// <param name="body">Species object to be added to the database</param>
        /// <response code="200">Successfully added Species to database</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Species not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPost]
        [Route("/species")]
        [ValidateModelState]
        [SwaggerOperation("AddSpecies")]
        public async virtual Task<IActionResult> AddSpecies([FromBody]Species body)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("addSpecies", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@s_name", body.Name);
                cmd.Parameters.AddWithValue("@s_classification", body.Classification);
                cmd.Parameters.AddWithValue("@s_designation", body.Designation);
                cmd.Parameters.AddWithValue("@s_average_height", body.AverageHeight);
                cmd.Parameters.AddWithValue("@s_skin_colors", body.SkinColors);
                cmd.Parameters.AddWithValue("@s_hair_colors", body.HairColors);
                cmd.Parameters.AddWithValue("@s_eye_colors", body.EyeColors);
                cmd.Parameters.AddWithValue("@s_average_lifespan", body.AverageLifespan);
                cmd.Parameters.AddWithValue("@s_language", body.Language);
                cmd.Parameters.AddWithValue("@s_homeworld", body.Homeworld);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                return StatusCode(200, body);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Delete a species from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully deleted Species object from the database</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Species not found</response>
        [HttpDelete]
        [Route("/species/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSpecies")]
        public async virtual Task<IActionResult> DeleteSpecies([FromRoute][Required]string name)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("deleteSpecies", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@s_name", name);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                if(rdr.RecordsAffected >= 1) {
                    return StatusCode(200);
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Get a list of species with the specified eye color
        /// </summary>
        /// <param name="eye_color"></param>
        /// <response code="200">Successfully found species(s)</response>
        /// <response code="400">Invalid eye color supplied</response>
        /// <response code="404">Species(s) not found</response>
        [HttpGet]
        [Route("/species/eye/{eye_color}")]
        [ValidateModelState]
        [SwaggerOperation("GetEyeColor")]
        [SwaggerResponse(statusCode: 200, type: typeof(SpeciesList), description: "Successfully found species(s)")]
        public async virtual Task<IActionResult> GetEyeColor([FromRoute][Required]string eye_color)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("getEyeColor", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@s_eye_color", eye_color);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                string body = String.Empty;
                while(await rdr.ReadAsync()) {
                    object[] res = new object[rdr.FieldCount];
                    rdr.GetValues(res);
                    string name = "{name: " + res[0] + "},";
                    Console.WriteLine(name);
                    body += " " + name;
                }
                if(body.Length > 0) {
                    return StatusCode(200, JsonConvert.SerializeObject("[" + body.Substring(0, body.Length - 1) + " ]"));
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Get a species from the database
        /// </summary>
        /// <param name="name"></param>
        /// <response code="200">Successfully found Species object</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Species not found</response>
        [HttpGet]
        [Route("/species/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetSpecies")]
        [SwaggerResponse(statusCode: 200, type: typeof(Species), description: "Successfully found Species object")]
        public async virtual Task<IActionResult> GetSpecies([FromRoute][Required]string name)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("getSpecies", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@s_name", name);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                while(await rdr.ReadAsync()) {
                    object[] res = new object[rdr.FieldCount];
                    rdr.GetValues(res);
                    string body =
                        "{name: " + res[1] + ", " +
                        "classification: " + res[2] + ", " +
                        "designation: " + res[3] + ", " +
                        "average_height: " + res[4] + ", " +
                        "skin_colors: " + res[5] + ", " +
                        "hair_colors: " + res[6] + ", " +
                        "eye_colors: " + res[7] + ", " +
                        "average_height: " + res[8] + ", " +
                        "language: " + res[9] + ", " +
                        "homeworld: " + res[10] + "}";
                    Console.WriteLine(body);
                    if(rdr.GetValues(res) > 0) {
                        return StatusCode(200, JsonConvert.SerializeObject(body));
                    }
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }

        /// <summary>
        /// Update an existing species
        /// </summary>
        /// <param name="body">Species object to be updated</param>
        /// <response code="200">Successfully updated Species object</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Species not found</response>
        /// <response code="409">Conflict with existing data</response>
        [HttpPut]
        [Route("/species")]
        [ValidateModelState]
        [SwaggerOperation("UpdateSpecies")]
        public async virtual Task<IActionResult> UpdateSpecies([FromBody]Species body)
        {
            try {
                using var conn = new MySqlConnection(HelperFunctions.getConnString());
                using var cmd = new MySqlCommand("updateSpecies", conn) {
                    CommandType = CommandType.StoredProcedure
                };

                cmd.Parameters.AddWithValue("@s_name", body.Name);
                cmd.Parameters.AddWithValue("@s_classification", body.Classification);
                cmd.Parameters.AddWithValue("@s_designation", body.Designation);
                cmd.Parameters.AddWithValue("@s_average_height", body.AverageHeight);
                cmd.Parameters.AddWithValue("@s_skin_colors", body.SkinColors);
                cmd.Parameters.AddWithValue("@s_hair_colors", body.HairColors);
                cmd.Parameters.AddWithValue("@s_eye_colors", body.EyeColors);
                cmd.Parameters.AddWithValue("@s_average_lifespan", body.AverageLifespan);
                cmd.Parameters.AddWithValue("@s_language", body.Language);
                cmd.Parameters.AddWithValue("@s_homeworld", body.Homeworld);

                await conn.OpenAsync();
                MySqlDataReader rdr = await cmd.ExecuteReaderAsync();
                if(rdr.RecordsAffected >= 1) {
                    return StatusCode(200, body);
                }
                return StatusCode(404);
            } catch(Exception ex) {
                return HelperFunctions.ErrorStatusCode(ex);
            }
        }
    }
}
