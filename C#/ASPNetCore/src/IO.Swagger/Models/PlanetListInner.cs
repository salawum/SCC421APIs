/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PlanetListInner : IEquatable<PlanetListInner>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RotationPeriod
        /// </summary>
        [DataMember(Name="rotation_period")]
        public decimal? RotationPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OrbitalPeriod
        /// </summary>
        [DataMember(Name="orbital_period")]
        public decimal? OrbitalPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Diameter
        /// </summary>
        [DataMember(Name="diameter")]
        public int? Diameter { get; set; }

        /// <summary>
        /// Gets or Sets Climate
        /// </summary>
        [DataMember(Name="climate")]
        public string Climate { get; set; }

        /// <summary>
        /// Gets or Sets Gravity
        /// </summary>
        [DataMember(Name="gravity")]
        public string Gravity { get; set; }

        /// <summary>
        /// Gets or Sets Terrain
        /// </summary>
        [DataMember(Name="terrain")]
        public string Terrain { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceWater
        /// </summary>
        [DataMember(Name="surface_water")]
        public decimal? SurfaceWater { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name="population")]
        public int? Population { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanetListInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RotationPeriod: ").Append(RotationPeriod).Append("\n");
            sb.Append("  OrbitalPeriod: ").Append(OrbitalPeriod).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Climate: ").Append(Climate).Append("\n");
            sb.Append("  Gravity: ").Append(Gravity).Append("\n");
            sb.Append("  Terrain: ").Append(Terrain).Append("\n");
            sb.Append("  SurfaceWater: ").Append(SurfaceWater).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlanetListInner)obj);
        }

        /// <summary>
        /// Returns true if PlanetListInner instances are equal
        /// </summary>
        /// <param name="other">Instance of PlanetListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanetListInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RotationPeriod == other.RotationPeriod ||
                    RotationPeriod != null &&
                    RotationPeriod.Equals(other.RotationPeriod)
                ) && 
                (
                    OrbitalPeriod == other.OrbitalPeriod ||
                    OrbitalPeriod != null &&
                    OrbitalPeriod.Equals(other.OrbitalPeriod)
                ) && 
                (
                    Diameter == other.Diameter ||
                    Diameter != null &&
                    Diameter.Equals(other.Diameter)
                ) && 
                (
                    Climate == other.Climate ||
                    Climate != null &&
                    Climate.Equals(other.Climate)
                ) && 
                (
                    Gravity == other.Gravity ||
                    Gravity != null &&
                    Gravity.Equals(other.Gravity)
                ) && 
                (
                    Terrain == other.Terrain ||
                    Terrain != null &&
                    Terrain.Equals(other.Terrain)
                ) && 
                (
                    SurfaceWater == other.SurfaceWater ||
                    SurfaceWater != null &&
                    SurfaceWater.Equals(other.SurfaceWater)
                ) && 
                (
                    Population == other.Population ||
                    Population != null &&
                    Population.Equals(other.Population)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RotationPeriod != null)
                    hashCode = hashCode * 59 + RotationPeriod.GetHashCode();
                    if (OrbitalPeriod != null)
                    hashCode = hashCode * 59 + OrbitalPeriod.GetHashCode();
                    if (Diameter != null)
                    hashCode = hashCode * 59 + Diameter.GetHashCode();
                    if (Climate != null)
                    hashCode = hashCode * 59 + Climate.GetHashCode();
                    if (Gravity != null)
                    hashCode = hashCode * 59 + Gravity.GetHashCode();
                    if (Terrain != null)
                    hashCode = hashCode * 59 + Terrain.GetHashCode();
                    if (SurfaceWater != null)
                    hashCode = hashCode * 59 + SurfaceWater.GetHashCode();
                    if (Population != null)
                    hashCode = hashCode * 59 + Population.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlanetListInner left, PlanetListInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlanetListInner left, PlanetListInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
