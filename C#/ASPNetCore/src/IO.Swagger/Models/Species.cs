/*
 * 4th Year Project
 *
 * (Will come up with a better name later)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Species : IEquatable<Species>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name="classification")]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or Sets Designation
        /// </summary>
        [DataMember(Name="designation")]
        public string Designation { get; set; }

        /// <summary>
        /// Gets or Sets AverageHeight
        /// </summary>
        [DataMember(Name="average_height")]
        public int? AverageHeight { get; set; }

        /// <summary>
        /// Gets or Sets SkinColors
        /// </summary>
        [DataMember(Name="skin_colors")]
        public string SkinColors { get; set; }

        /// <summary>
        /// Gets or Sets HairColours
        /// </summary>
        [DataMember(Name="hair_colours")]
        public string HairColours { get; set; }

        /// <summary>
        /// Gets or Sets EyeColors
        /// </summary>
        [DataMember(Name="eye_colors")]
        public string EyeColors { get; set; }

        /// <summary>
        /// Gets or Sets AverageLifespan
        /// </summary>
        [DataMember(Name="average_lifespan")]
        public int? AverageLifespan { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Homeworld
        /// </summary>
        [DataMember(Name="homeworld")]
        public string Homeworld { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Species {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Designation: ").Append(Designation).Append("\n");
            sb.Append("  AverageHeight: ").Append(AverageHeight).Append("\n");
            sb.Append("  SkinColors: ").Append(SkinColors).Append("\n");
            sb.Append("  HairColours: ").Append(HairColours).Append("\n");
            sb.Append("  EyeColors: ").Append(EyeColors).Append("\n");
            sb.Append("  AverageLifespan: ").Append(AverageLifespan).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Homeworld: ").Append(Homeworld).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Species)obj);
        }

        /// <summary>
        /// Returns true if Species instances are equal
        /// </summary>
        /// <param name="other">Instance of Species to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Species other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Classification == other.Classification ||
                    Classification != null &&
                    Classification.Equals(other.Classification)
                ) && 
                (
                    Designation == other.Designation ||
                    Designation != null &&
                    Designation.Equals(other.Designation)
                ) && 
                (
                    AverageHeight == other.AverageHeight ||
                    AverageHeight != null &&
                    AverageHeight.Equals(other.AverageHeight)
                ) && 
                (
                    SkinColors == other.SkinColors ||
                    SkinColors != null &&
                    SkinColors.Equals(other.SkinColors)
                ) && 
                (
                    HairColours == other.HairColours ||
                    HairColours != null &&
                    HairColours.Equals(other.HairColours)
                ) && 
                (
                    EyeColors == other.EyeColors ||
                    EyeColors != null &&
                    EyeColors.Equals(other.EyeColors)
                ) && 
                (
                    AverageLifespan == other.AverageLifespan ||
                    AverageLifespan != null &&
                    AverageLifespan.Equals(other.AverageLifespan)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Homeworld == other.Homeworld ||
                    Homeworld != null &&
                    Homeworld.Equals(other.Homeworld)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Classification != null)
                    hashCode = hashCode * 59 + Classification.GetHashCode();
                    if (Designation != null)
                    hashCode = hashCode * 59 + Designation.GetHashCode();
                    if (AverageHeight != null)
                    hashCode = hashCode * 59 + AverageHeight.GetHashCode();
                    if (SkinColors != null)
                    hashCode = hashCode * 59 + SkinColors.GetHashCode();
                    if (HairColours != null)
                    hashCode = hashCode * 59 + HairColours.GetHashCode();
                    if (EyeColors != null)
                    hashCode = hashCode * 59 + EyeColors.GetHashCode();
                    if (AverageLifespan != null)
                    hashCode = hashCode * 59 + AverageLifespan.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Homeworld != null)
                    hashCode = hashCode * 59 + Homeworld.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Species left, Species right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Species left, Species right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
